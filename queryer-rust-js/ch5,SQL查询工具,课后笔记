// 这篇文章看了我3天，算是我看的非常认真的文档，真的是只能一个一个来

// 分析：
// 1、使用 sqlparser 解析sql

// 2、使用 polars 对 csv -> (转化) DataFrame

// 3、sql ast -> （映射）DataFrame, 用代码库的方式表达就是 SqlParser AST -> （转化）Polars AST
// 此过程叫语法之间的转化，也叫数据结构的转化


// 文件：
// examples/dialect.rs 文件，查看 sqlparser的AST

// src/dialect.rs文件，测试是否能正常解析自定的方言sql 
//（SELECT * from https://abc.xyz/covid-cases.csv where new_deaths >= 500）

// example/covid.rs, 实现一个DataFrame的加载和查询

// 接下来的重点来了，src/convert.rs, 定义一个数据结构来描述两者对应的关系
// 这个是本篇文章的核心，看老师的讲解还好，但是真正去看完整的代码，整个人都是懵的，特别是涉及到rust的生命周期。其实就是自己用的少

// 获取数据，将retrieve_data 和具体每一种类型的处理分离，实现低耦合、高内聚 

// 主流程，在解引用就挺懵的。所以这个文件就看得云里雾里

//最后终于打印出来了。
In [1]: import queryer_py

In [2]: sql = queryer_py.example_sql()

In [3]: print(queryer_py.query(sql, 'csv'))
name,total_cases,new_cases,total_deaths,new_deaths
World,324247961.0,3315994.0,5536264.0,7912.0
World,311269128.0,3188197.0,5501583.0,6425.0
World,320931967.0,3182700.0,5528352.0,8217.0
World,314300524.0,3031399.0,5510916.0,9333.0
World,303867545.0,2943889.0,5485492.0,7290.0
High income,172625621.0,2821346.0,2017981.0,6039.0

node 的版本
➜  queryer-js node
Welcome to Node.js v14.16.0.
Type ".help" for more information.
> let sql = require('.')
undefined
> sql.query()
'name,total_cases,new_cases,total_deaths,new_deaths\n' +
  'World,324247830.0,3315981.0,5536265.0,7913.0\n' +
  'World,311269022.0,3188191.0,5501583.0,6425.0\n' +
  'World,320931849.0,3182697.0,5528352.0,8217.0\n' +
  'World,314300414.0,3031395.0,5510916.0,9333.0\n' +
  'World,303867451.0,2943887.0,5485492.0,7290.0\n' +
  'High income,172625462.0,2821336.0,2017982.0,6039.0\n'


// 老师能我看下我写的代码吗？我看了neno的官方文档，好像不能多个参数的function，只能是“FunctionContext”，所以方法里面的，sql和csv都写死了。
fn query (mut cx: FunctionContext) -> JsResult<JsString>{
    let rt = tokio::runtime::Runtime::new().unwrap();
    let data = rt.block_on(async { queryer::query(queryer::example_sql()).await.unwrap() });
    Ok(cx.string(data.to_csv().unwrap()))
}


#[neon::main]
fn main(mut cx: ModuleContext) -> NeonResult<()> {
    cx.export_function("query", query)?;
    Ok(())
}